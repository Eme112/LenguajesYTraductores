Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     empty -> <empty>
Rule 2     C -> MENOR
Rule 3     C -> MAYOR
Rule 4     C -> MENOR_IGUAL
Rule 5     C -> MAYOR_IGUAL
Rule 6     C -> IGUAL
Rule 7     C -> DIFERENTE
Rule 8     E -> E2
Rule 9     E -> E2 C E2
Rule 10    E2 -> E3
Rule 11    E2 -> E2 OR E3
Rule 12    E2 -> E2 MAS E3
Rule 13    E2 -> E2 MENOS E3
Rule 14    E3 -> E4
Rule 15    E3 -> E3 AND E4
Rule 16    E3 -> E3 POR E4
Rule 17    E3 -> E3 ENTRE E4
Rule 18    E3 -> E3 MODULO E4
Rule 19    E4 -> T
Rule 20    E4 -> NOT T
Rule 21    T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
Rule 22    T -> FUNCTION
Rule 23    T -> ID_COMPLETO
Rule 24    T -> VALOR_INT
Rule 25    T -> VALOR_FLOAT
Rule 26    ID_COMPLETO -> ID
Rule 27    V -> TIPO DOS_PUNTOS A PUNTO_COMA
Rule 28    V -> TIPO DOS_PUNTOS ID PUNTO_COMA
Rule 29    TIPO -> INT
Rule 30    TIPO -> FLOAT
Rule 31    V_M -> empty
Rule 32    V_M -> V V_M
Rule 33    A -> ID ASIGNACION VALOR_INT
Rule 34    A -> ID ASIGNACION VALOR_FLOAT
Rule 35    A -> ID ASIGNACION E
Rule 36    A -> ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
Rule 37    EST -> empty
Rule 38    EST -> LOOP END_LOOP PUNTO_COMA EST
Rule 39    EST -> IF_ END_IF PUNTO_COMA EST
Rule 40    EST -> A PUNTO_COMA EST
Rule 41    EST -> PROCEDURE PUNTO_COMA EST
Rule 42    EST -> FUNCTION PUNTO_COMA EST
Rule 43    EST -> ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
Rule 44    LOOP -> DO_WHILE
Rule 45    LOOP -> WHILE_
Rule 46    LOOP -> FOR_
Rule 47    DO_WHILE -> DO DOS_PUNTOS EST WHILE E PUNTO_COMA
Rule 48    WHILE_ -> WHILE E DOS_PUNTOS EST
Rule 49    FOR_ -> FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST
Rule 50    IF_ -> IF E DOS_PUNTOS EST ELSIF_
Rule 51    ELSIF_ -> END IF PUNTO_COMA
Rule 52    ELSIF_ -> ELSE DOS_PUNTOS EST END IF PUNTO_COMA
Rule 53    ELSIF_ -> ELSIF DOS_PUNTOS E EST ELSIF_
Rule 54    P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE
Rule 55    P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA
Rule 56    F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA
Rule 57    MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA
Rule 58    MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA
Rule 59    PROGRAMA -> MP PROGRAMA_H
Rule 60    PROGRAMA_H -> empty
Rule 61    PROGRAMA_H -> P PROGRAMA_H
Rule 62    PROGRAMA_H -> F PROGRAMA_H

Terminals, with rules where they appear

AND                  : 15
ASIGNACION           : 33 34 35 36
BEGIN                : 54 55 56 57 58
DIFERENTE            : 7
DO                   : 47
DOS_PUNTOS           : 27 28 47 48 49 50 52 53 54 55 56 57 58
ELSE                 : 52
ELSIF                : 53
END                  : 51 52 54 55 56 57 58
END_IF               : 39
END_LOOP             : 38
ENTRE                : 17
FLOAT                : 30
FOR                  : 49
FUNCTION             : 22 42 56
ID                   : 26 28 33 34 35 36 43 54 55 56 56
IF                   : 50 51 52
IGUAL                : 6
INT                  : 29
MAIN                 : 57 58
MAS                  : 12
MAYOR                : 3
MAYOR_IGUAL          : 5
MENOR                : 2
MENOR_IGUAL          : 4
MENOS                : 13
MODULO               : 18
NOT                  : 20
OR                   : 11
PARENTESIS_DERECHO   : 21 36 43 54 55 56 57 58
PARENTESIS_IZQUIERDO : 21 36 43 54 55 56 57 58
POR                  : 16
PROCEDURE            : 41 54 54 55 55 57 57 58 58
PUNTO_COMA           : 27 28 38 39 40 41 42 43 47 49 49 51 52 54 55 55 55 56 56 56 57 57 58 58 58
RETURN               : 55 56 58
VALOR_FLOAT          : 25 34
VALOR_INT            : 24 33
WHILE                : 47 48
error                : 

Nonterminals, with rules where they appear

A                    : 27 40
C                    : 9
DO_WHILE             : 44
E                    : 21 35 47 48 49 50 53
E2                   : 8 9 9 11 12 13
E3                   : 10 11 12 13 15 16 17 18
E4                   : 14 15 16 17 18
ELSIF_               : 50 53
EST                  : 38 39 40 41 42 43 47 48 49 49 49 50 52 53 54 55 56 57 58
F                    : 62
FOR_                 : 46
ID_COMPLETO          : 23 36
IF_                  : 39
LOOP                 : 38
MP                   : 59
P                    : 61
PROGRAMA             : 0
PROGRAMA_H           : 59 61 62
T                    : 19 20
TIPO                 : 27 28 56
V                    : 32
V_M                  : 32 54 55 56 57 58
WHILE_               : 45
empty                : 31 37 60

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (59) PROGRAMA -> . MP PROGRAMA_H
    (57) MP -> . PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA
    (58) MP -> . PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    PROCEDURE       shift and go to state 3

    PROGRAMA                       shift and go to state 1
    MP                             shift and go to state 2

state 1

    (0) S' -> PROGRAMA .



state 2

    (59) PROGRAMA -> MP . PROGRAMA_H
    (60) PROGRAMA_H -> . empty
    (61) PROGRAMA_H -> . P PROGRAMA_H
    (62) PROGRAMA_H -> . F PROGRAMA_H
    (1) empty -> .
    (54) P -> . PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE
    (55) P -> . PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA
    (56) F -> . TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA
    (29) TIPO -> . INT
    (30) TIPO -> . FLOAT

    $end            reduce using rule 1 (empty -> .)
    PROCEDURE       shift and go to state 8
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    PROGRAMA_H                     shift and go to state 4
    empty                          shift and go to state 5
    P                              shift and go to state 6
    F                              shift and go to state 7
    TIPO                           shift and go to state 9

state 3

    (57) MP -> PROCEDURE . MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA
    (58) MP -> PROCEDURE . MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    MAIN            shift and go to state 12


state 4

    (59) PROGRAMA -> MP PROGRAMA_H .

    $end            reduce using rule 59 (PROGRAMA -> MP PROGRAMA_H .)


state 5

    (60) PROGRAMA_H -> empty .

    $end            reduce using rule 60 (PROGRAMA_H -> empty .)


state 6

    (61) PROGRAMA_H -> P . PROGRAMA_H
    (60) PROGRAMA_H -> . empty
    (61) PROGRAMA_H -> . P PROGRAMA_H
    (62) PROGRAMA_H -> . F PROGRAMA_H
    (1) empty -> .
    (54) P -> . PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE
    (55) P -> . PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA
    (56) F -> . TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA
    (29) TIPO -> . INT
    (30) TIPO -> . FLOAT

    $end            reduce using rule 1 (empty -> .)
    PROCEDURE       shift and go to state 8
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    P                              shift and go to state 6
    PROGRAMA_H                     shift and go to state 13
    empty                          shift and go to state 5
    F                              shift and go to state 7
    TIPO                           shift and go to state 9

state 7

    (62) PROGRAMA_H -> F . PROGRAMA_H
    (60) PROGRAMA_H -> . empty
    (61) PROGRAMA_H -> . P PROGRAMA_H
    (62) PROGRAMA_H -> . F PROGRAMA_H
    (1) empty -> .
    (54) P -> . PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE
    (55) P -> . PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA
    (56) F -> . TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA
    (29) TIPO -> . INT
    (30) TIPO -> . FLOAT

    $end            reduce using rule 1 (empty -> .)
    PROCEDURE       shift and go to state 8
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    F                              shift and go to state 7
    PROGRAMA_H                     shift and go to state 14
    empty                          shift and go to state 5
    P                              shift and go to state 6
    TIPO                           shift and go to state 9

state 8

    (54) P -> PROCEDURE . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE
    (55) P -> PROCEDURE . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    ID              shift and go to state 15


state 9

    (56) F -> TIPO . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA

    ID              shift and go to state 16


state 10

    (29) TIPO -> INT .

    ID              reduce using rule 29 (TIPO -> INT .)
    DOS_PUNTOS      reduce using rule 29 (TIPO -> INT .)


state 11

    (30) TIPO -> FLOAT .

    ID              reduce using rule 30 (TIPO -> FLOAT .)
    DOS_PUNTOS      reduce using rule 30 (TIPO -> FLOAT .)


state 12

    (57) MP -> PROCEDURE MAIN . PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA
    (58) MP -> PROCEDURE MAIN . PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    PARENTESIS_IZQUIERDO shift and go to state 17


state 13

    (61) PROGRAMA_H -> P PROGRAMA_H .

    $end            reduce using rule 61 (PROGRAMA_H -> P PROGRAMA_H .)


state 14

    (62) PROGRAMA_H -> F PROGRAMA_H .

    $end            reduce using rule 62 (PROGRAMA_H -> F PROGRAMA_H .)


state 15

    (54) P -> PROCEDURE ID . PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE
    (55) P -> PROCEDURE ID . PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    PARENTESIS_IZQUIERDO shift and go to state 18


state 16

    (56) F -> TIPO ID . PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA

    PARENTESIS_IZQUIERDO shift and go to state 19


state 17

    (57) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO . PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA
    (58) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO . PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    PARENTESIS_DERECHO shift and go to state 20


state 18

    (54) P -> PROCEDURE ID PARENTESIS_IZQUIERDO . PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE
    (55) P -> PROCEDURE ID PARENTESIS_IZQUIERDO . PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    PARENTESIS_DERECHO shift and go to state 21


state 19

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO . PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA

    PARENTESIS_DERECHO shift and go to state 22


state 20

    (57) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO . DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA
    (58) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO . DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    DOS_PUNTOS      shift and go to state 23


state 21

    (54) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO . DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE
    (55) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO . DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    DOS_PUNTOS      shift and go to state 24


state 22

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO . DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA

    DOS_PUNTOS      shift and go to state 25


state 23

    (57) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS . V_M BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA
    (58) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS . V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA
    (31) V_M -> . empty
    (32) V_M -> . V V_M
    (1) empty -> .
    (27) V -> . TIPO DOS_PUNTOS A PUNTO_COMA
    (28) V -> . TIPO DOS_PUNTOS ID PUNTO_COMA
    (29) TIPO -> . INT
    (30) TIPO -> . FLOAT

    BEGIN           reduce using rule 1 (empty -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    V_M                            shift and go to state 26
    empty                          shift and go to state 27
    V                              shift and go to state 28
    TIPO                           shift and go to state 29

state 24

    (54) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS . V_M BEGIN PUNTO_COMA EST END PROCEDURE
    (55) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS . V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA
    (31) V_M -> . empty
    (32) V_M -> . V V_M
    (1) empty -> .
    (27) V -> . TIPO DOS_PUNTOS A PUNTO_COMA
    (28) V -> . TIPO DOS_PUNTOS ID PUNTO_COMA
    (29) TIPO -> . INT
    (30) TIPO -> . FLOAT

    BEGIN           reduce using rule 1 (empty -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    V_M                            shift and go to state 30
    empty                          shift and go to state 27
    V                              shift and go to state 28
    TIPO                           shift and go to state 29

state 25

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS . V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA
    (31) V_M -> . empty
    (32) V_M -> . V V_M
    (1) empty -> .
    (27) V -> . TIPO DOS_PUNTOS A PUNTO_COMA
    (28) V -> . TIPO DOS_PUNTOS ID PUNTO_COMA
    (29) TIPO -> . INT
    (30) TIPO -> . FLOAT

    BEGIN           reduce using rule 1 (empty -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    TIPO                           shift and go to state 29
    V_M                            shift and go to state 31
    empty                          shift and go to state 27
    V                              shift and go to state 28

state 26

    (57) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M . BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA
    (58) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M . BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    BEGIN           shift and go to state 32


state 27

    (31) V_M -> empty .

    BEGIN           reduce using rule 31 (V_M -> empty .)


state 28

    (32) V_M -> V . V_M
    (31) V_M -> . empty
    (32) V_M -> . V V_M
    (1) empty -> .
    (27) V -> . TIPO DOS_PUNTOS A PUNTO_COMA
    (28) V -> . TIPO DOS_PUNTOS ID PUNTO_COMA
    (29) TIPO -> . INT
    (30) TIPO -> . FLOAT

    BEGIN           reduce using rule 1 (empty -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    V                              shift and go to state 28
    V_M                            shift and go to state 33
    empty                          shift and go to state 27
    TIPO                           shift and go to state 29

state 29

    (27) V -> TIPO . DOS_PUNTOS A PUNTO_COMA
    (28) V -> TIPO . DOS_PUNTOS ID PUNTO_COMA

    DOS_PUNTOS      shift and go to state 34


state 30

    (54) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M . BEGIN PUNTO_COMA EST END PROCEDURE
    (55) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M . BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    BEGIN           shift and go to state 35


state 31

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M . BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA

    BEGIN           shift and go to state 36


state 32

    (57) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN . PUNTO_COMA EST END PROCEDURE PUNTO_COMA
    (58) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN . PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    PUNTO_COMA      shift and go to state 37


state 33

    (32) V_M -> V V_M .

    BEGIN           reduce using rule 32 (V_M -> V V_M .)


state 34

    (27) V -> TIPO DOS_PUNTOS . A PUNTO_COMA
    (28) V -> TIPO DOS_PUNTOS . ID PUNTO_COMA
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO

    ID              shift and go to state 39

    A                              shift and go to state 38

state 35

    (54) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN . PUNTO_COMA EST END PROCEDURE
    (55) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN . PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    PUNTO_COMA      shift and go to state 40


state 36

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN . PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA

    PUNTO_COMA      shift and go to state 41


state 37

    (57) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA . EST END PROCEDURE PUNTO_COMA
    (58) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA . EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    EST                            shift and go to state 43
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 38

    (27) V -> TIPO DOS_PUNTOS A . PUNTO_COMA

    PUNTO_COMA      shift and go to state 57


state 39

    (28) V -> TIPO DOS_PUNTOS ID . PUNTO_COMA
    (33) A -> ID . ASIGNACION VALOR_INT
    (34) A -> ID . ASIGNACION VALOR_FLOAT
    (35) A -> ID . ASIGNACION E
    (36) A -> ID . ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO

    PUNTO_COMA      shift and go to state 58
    ASIGNACION      shift and go to state 59


state 40

    (54) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA . EST END PROCEDURE
    (55) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA . EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    EST                            shift and go to state 60
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 41

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA . EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    RETURN          reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    EST                            shift and go to state 61
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 42

    (41) EST -> PROCEDURE . PUNTO_COMA EST

    PUNTO_COMA      shift and go to state 62


state 43

    (57) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST . END PROCEDURE PUNTO_COMA
    (58) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST . RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    END             shift and go to state 63
    RETURN          shift and go to state 64


state 44

    (37) EST -> empty .

    END             reduce using rule 37 (EST -> empty .)
    RETURN          reduce using rule 37 (EST -> empty .)
    PUNTO_COMA      reduce using rule 37 (EST -> empty .)
    WHILE           reduce using rule 37 (EST -> empty .)
    ELSE            reduce using rule 37 (EST -> empty .)
    ELSIF           reduce using rule 37 (EST -> empty .)
    END_LOOP        reduce using rule 37 (EST -> empty .)
    DOS_PUNTOS      reduce using rule 37 (EST -> empty .)


state 45

    (38) EST -> LOOP . END_LOOP PUNTO_COMA EST

    END_LOOP        shift and go to state 65


state 46

    (39) EST -> IF_ . END_IF PUNTO_COMA EST

    END_IF          shift and go to state 66


state 47

    (40) EST -> A . PUNTO_COMA EST

    PUNTO_COMA      shift and go to state 67


state 48

    (42) EST -> FUNCTION . PUNTO_COMA EST

    PUNTO_COMA      shift and go to state 68


state 49

    (43) EST -> ID . PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (33) A -> ID . ASIGNACION VALOR_INT
    (34) A -> ID . ASIGNACION VALOR_FLOAT
    (35) A -> ID . ASIGNACION E
    (36) A -> ID . ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO

    PARENTESIS_IZQUIERDO shift and go to state 69
    ASIGNACION      shift and go to state 59


state 50

    (44) LOOP -> DO_WHILE .

    END_LOOP        reduce using rule 44 (LOOP -> DO_WHILE .)


state 51

    (45) LOOP -> WHILE_ .

    END_LOOP        reduce using rule 45 (LOOP -> WHILE_ .)


state 52

    (46) LOOP -> FOR_ .

    END_LOOP        reduce using rule 46 (LOOP -> FOR_ .)


state 53

    (50) IF_ -> IF . E DOS_PUNTOS EST ELSIF_
    (8) E -> . E2
    (9) E -> . E2 C E2
    (10) E2 -> . E3
    (11) E2 -> . E2 OR E3
    (12) E2 -> . E2 MAS E3
    (13) E2 -> . E2 MENOS E3
    (14) E3 -> . E4
    (15) E3 -> . E3 AND E4
    (16) E3 -> . E3 POR E4
    (17) E3 -> . E3 ENTRE E4
    (18) E3 -> . E3 MODULO E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E                              shift and go to state 70
    E2                             shift and go to state 71
    E3                             shift and go to state 72
    E4                             shift and go to state 73
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 54

    (47) DO_WHILE -> DO . DOS_PUNTOS EST WHILE E PUNTO_COMA

    DOS_PUNTOS      shift and go to state 82


state 55

    (48) WHILE_ -> WHILE . E DOS_PUNTOS EST
    (8) E -> . E2
    (9) E -> . E2 C E2
    (10) E2 -> . E3
    (11) E2 -> . E2 OR E3
    (12) E2 -> . E2 MAS E3
    (13) E2 -> . E2 MENOS E3
    (14) E3 -> . E4
    (15) E3 -> . E3 AND E4
    (16) E3 -> . E3 POR E4
    (17) E3 -> . E3 ENTRE E4
    (18) E3 -> . E3 MODULO E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E                              shift and go to state 83
    E2                             shift and go to state 71
    E3                             shift and go to state 72
    E4                             shift and go to state 73
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 56

    (49) FOR_ -> FOR . EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    PUNTO_COMA      reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    EST                            shift and go to state 84
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 57

    (27) V -> TIPO DOS_PUNTOS A PUNTO_COMA .

    INT             reduce using rule 27 (V -> TIPO DOS_PUNTOS A PUNTO_COMA .)
    FLOAT           reduce using rule 27 (V -> TIPO DOS_PUNTOS A PUNTO_COMA .)
    BEGIN           reduce using rule 27 (V -> TIPO DOS_PUNTOS A PUNTO_COMA .)


state 58

    (28) V -> TIPO DOS_PUNTOS ID PUNTO_COMA .

    INT             reduce using rule 28 (V -> TIPO DOS_PUNTOS ID PUNTO_COMA .)
    FLOAT           reduce using rule 28 (V -> TIPO DOS_PUNTOS ID PUNTO_COMA .)
    BEGIN           reduce using rule 28 (V -> TIPO DOS_PUNTOS ID PUNTO_COMA .)


state 59

    (33) A -> ID ASIGNACION . VALOR_INT
    (34) A -> ID ASIGNACION . VALOR_FLOAT
    (35) A -> ID ASIGNACION . E
    (36) A -> ID ASIGNACION . ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (8) E -> . E2
    (9) E -> . E2 C E2
    (26) ID_COMPLETO -> . ID
    (10) E2 -> . E3
    (11) E2 -> . E2 OR E3
    (12) E2 -> . E2 MAS E3
    (13) E2 -> . E2 MENOS E3
    (14) E3 -> . E4
    (15) E3 -> . E3 AND E4
    (16) E3 -> . E3 POR E4
    (17) E3 -> . E3 ENTRE E4
    (18) E3 -> . E3 MODULO E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT

    VALOR_INT       shift and go to state 85
    VALOR_FLOAT     shift and go to state 86
    ID              shift and go to state 81
    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77

    E                              shift and go to state 87
    ID_COMPLETO                    shift and go to state 88
    E2                             shift and go to state 71
    E3                             shift and go to state 72
    E4                             shift and go to state 73
    T                              shift and go to state 74

state 60

    (54) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST . END PROCEDURE
    (55) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST . RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA

    END             shift and go to state 89
    RETURN          shift and go to state 90


state 61

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST . RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA

    RETURN          shift and go to state 91


state 62

    (41) EST -> PROCEDURE PUNTO_COMA . EST
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

  ! shift/reduce conflict for WHILE resolved as shift
    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PUNTO_COMA      reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    ELSIF           reduce using rule 1 (empty -> .)
    END_LOOP        reduce using rule 1 (empty -> .)
    DOS_PUNTOS      reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

  ! WHILE           [ reduce using rule 1 (empty -> .) ]

    EST                            shift and go to state 92
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 63

    (57) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END . PROCEDURE PUNTO_COMA

    PROCEDURE       shift and go to state 93


state 64

    (58) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN . PUNTO_COMA END PROCEDURE PUNTO_COMA

    PUNTO_COMA      shift and go to state 94


state 65

    (38) EST -> LOOP END_LOOP . PUNTO_COMA EST

    PUNTO_COMA      shift and go to state 95


state 66

    (39) EST -> IF_ END_IF . PUNTO_COMA EST

    PUNTO_COMA      shift and go to state 96


state 67

    (40) EST -> A PUNTO_COMA . EST
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

  ! shift/reduce conflict for WHILE resolved as shift
    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PUNTO_COMA      reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    ELSIF           reduce using rule 1 (empty -> .)
    END_LOOP        reduce using rule 1 (empty -> .)
    DOS_PUNTOS      reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

  ! WHILE           [ reduce using rule 1 (empty -> .) ]

    A                              shift and go to state 47
    EST                            shift and go to state 97
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 68

    (42) EST -> FUNCTION PUNTO_COMA . EST
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

  ! shift/reduce conflict for WHILE resolved as shift
    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PUNTO_COMA      reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    ELSIF           reduce using rule 1 (empty -> .)
    END_LOOP        reduce using rule 1 (empty -> .)
    DOS_PUNTOS      reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

  ! WHILE           [ reduce using rule 1 (empty -> .) ]

    EST                            shift and go to state 98
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 69

    (43) EST -> ID PARENTESIS_IZQUIERDO . PARENTESIS_DERECHO PUNTO_COMA EST

    PARENTESIS_DERECHO shift and go to state 99


state 70

    (50) IF_ -> IF E . DOS_PUNTOS EST ELSIF_

    DOS_PUNTOS      shift and go to state 100


state 71

    (8) E -> E2 .
    (9) E -> E2 . C E2
    (11) E2 -> E2 . OR E3
    (12) E2 -> E2 . MAS E3
    (13) E2 -> E2 . MENOS E3
    (2) C -> . MENOR
    (3) C -> . MAYOR
    (4) C -> . MENOR_IGUAL
    (5) C -> . MAYOR_IGUAL
    (6) C -> . IGUAL
    (7) C -> . DIFERENTE

    DOS_PUNTOS      reduce using rule 8 (E -> E2 .)
    PUNTO_COMA      reduce using rule 8 (E -> E2 .)
    PARENTESIS_DERECHO reduce using rule 8 (E -> E2 .)
    PROCEDURE       reduce using rule 8 (E -> E2 .)
    FUNCTION        reduce using rule 8 (E -> E2 .)
    ID              reduce using rule 8 (E -> E2 .)
    IF              reduce using rule 8 (E -> E2 .)
    DO              reduce using rule 8 (E -> E2 .)
    WHILE           reduce using rule 8 (E -> E2 .)
    FOR             reduce using rule 8 (E -> E2 .)
    END             reduce using rule 8 (E -> E2 .)
    ELSE            reduce using rule 8 (E -> E2 .)
    ELSIF           reduce using rule 8 (E -> E2 .)
    OR              shift and go to state 102
    MAS             shift and go to state 103
    MENOS           shift and go to state 104
    MENOR           shift and go to state 105
    MAYOR           shift and go to state 106
    MENOR_IGUAL     shift and go to state 107
    MAYOR_IGUAL     shift and go to state 108
    IGUAL           shift and go to state 109
    DIFERENTE       shift and go to state 110

    C                              shift and go to state 101

state 72

    (10) E2 -> E3 .
    (15) E3 -> E3 . AND E4
    (16) E3 -> E3 . POR E4
    (17) E3 -> E3 . ENTRE E4
    (18) E3 -> E3 . MODULO E4

    OR              reduce using rule 10 (E2 -> E3 .)
    MAS             reduce using rule 10 (E2 -> E3 .)
    MENOS           reduce using rule 10 (E2 -> E3 .)
    MENOR           reduce using rule 10 (E2 -> E3 .)
    MAYOR           reduce using rule 10 (E2 -> E3 .)
    MENOR_IGUAL     reduce using rule 10 (E2 -> E3 .)
    MAYOR_IGUAL     reduce using rule 10 (E2 -> E3 .)
    IGUAL           reduce using rule 10 (E2 -> E3 .)
    DIFERENTE       reduce using rule 10 (E2 -> E3 .)
    DOS_PUNTOS      reduce using rule 10 (E2 -> E3 .)
    PUNTO_COMA      reduce using rule 10 (E2 -> E3 .)
    PARENTESIS_DERECHO reduce using rule 10 (E2 -> E3 .)
    PROCEDURE       reduce using rule 10 (E2 -> E3 .)
    FUNCTION        reduce using rule 10 (E2 -> E3 .)
    ID              reduce using rule 10 (E2 -> E3 .)
    IF              reduce using rule 10 (E2 -> E3 .)
    DO              reduce using rule 10 (E2 -> E3 .)
    WHILE           reduce using rule 10 (E2 -> E3 .)
    FOR             reduce using rule 10 (E2 -> E3 .)
    END             reduce using rule 10 (E2 -> E3 .)
    ELSE            reduce using rule 10 (E2 -> E3 .)
    ELSIF           reduce using rule 10 (E2 -> E3 .)
    AND             shift and go to state 111
    POR             shift and go to state 112
    ENTRE           shift and go to state 113
    MODULO          shift and go to state 114


state 73

    (14) E3 -> E4 .

    AND             reduce using rule 14 (E3 -> E4 .)
    POR             reduce using rule 14 (E3 -> E4 .)
    ENTRE           reduce using rule 14 (E3 -> E4 .)
    MODULO          reduce using rule 14 (E3 -> E4 .)
    OR              reduce using rule 14 (E3 -> E4 .)
    MAS             reduce using rule 14 (E3 -> E4 .)
    MENOS           reduce using rule 14 (E3 -> E4 .)
    MENOR           reduce using rule 14 (E3 -> E4 .)
    MAYOR           reduce using rule 14 (E3 -> E4 .)
    MENOR_IGUAL     reduce using rule 14 (E3 -> E4 .)
    MAYOR_IGUAL     reduce using rule 14 (E3 -> E4 .)
    IGUAL           reduce using rule 14 (E3 -> E4 .)
    DIFERENTE       reduce using rule 14 (E3 -> E4 .)
    DOS_PUNTOS      reduce using rule 14 (E3 -> E4 .)
    PUNTO_COMA      reduce using rule 14 (E3 -> E4 .)
    PARENTESIS_DERECHO reduce using rule 14 (E3 -> E4 .)
    PROCEDURE       reduce using rule 14 (E3 -> E4 .)
    FUNCTION        reduce using rule 14 (E3 -> E4 .)
    ID              reduce using rule 14 (E3 -> E4 .)
    IF              reduce using rule 14 (E3 -> E4 .)
    DO              reduce using rule 14 (E3 -> E4 .)
    WHILE           reduce using rule 14 (E3 -> E4 .)
    FOR             reduce using rule 14 (E3 -> E4 .)
    END             reduce using rule 14 (E3 -> E4 .)
    ELSE            reduce using rule 14 (E3 -> E4 .)
    ELSIF           reduce using rule 14 (E3 -> E4 .)


state 74

    (19) E4 -> T .

    AND             reduce using rule 19 (E4 -> T .)
    POR             reduce using rule 19 (E4 -> T .)
    ENTRE           reduce using rule 19 (E4 -> T .)
    MODULO          reduce using rule 19 (E4 -> T .)
    OR              reduce using rule 19 (E4 -> T .)
    MAS             reduce using rule 19 (E4 -> T .)
    MENOS           reduce using rule 19 (E4 -> T .)
    MENOR           reduce using rule 19 (E4 -> T .)
    MAYOR           reduce using rule 19 (E4 -> T .)
    MENOR_IGUAL     reduce using rule 19 (E4 -> T .)
    MAYOR_IGUAL     reduce using rule 19 (E4 -> T .)
    IGUAL           reduce using rule 19 (E4 -> T .)
    DIFERENTE       reduce using rule 19 (E4 -> T .)
    DOS_PUNTOS      reduce using rule 19 (E4 -> T .)
    PUNTO_COMA      reduce using rule 19 (E4 -> T .)
    PARENTESIS_DERECHO reduce using rule 19 (E4 -> T .)
    PROCEDURE       reduce using rule 19 (E4 -> T .)
    FUNCTION        reduce using rule 19 (E4 -> T .)
    ID              reduce using rule 19 (E4 -> T .)
    IF              reduce using rule 19 (E4 -> T .)
    DO              reduce using rule 19 (E4 -> T .)
    WHILE           reduce using rule 19 (E4 -> T .)
    FOR             reduce using rule 19 (E4 -> T .)
    END             reduce using rule 19 (E4 -> T .)
    ELSE            reduce using rule 19 (E4 -> T .)
    ELSIF           reduce using rule 19 (E4 -> T .)


state 75

    (20) E4 -> NOT . T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    T                              shift and go to state 115
    ID_COMPLETO                    shift and go to state 78

state 76

    (21) T -> PARENTESIS_IZQUIERDO . E PARENTESIS_DERECHO
    (8) E -> . E2
    (9) E -> . E2 C E2
    (10) E2 -> . E3
    (11) E2 -> . E2 OR E3
    (12) E2 -> . E2 MAS E3
    (13) E2 -> . E2 MENOS E3
    (14) E3 -> . E4
    (15) E3 -> . E3 AND E4
    (16) E3 -> . E3 POR E4
    (17) E3 -> . E3 ENTRE E4
    (18) E3 -> . E3 MODULO E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E                              shift and go to state 116
    E2                             shift and go to state 71
    E3                             shift and go to state 72
    E4                             shift and go to state 73
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 77

    (22) T -> FUNCTION .

    AND             reduce using rule 22 (T -> FUNCTION .)
    POR             reduce using rule 22 (T -> FUNCTION .)
    ENTRE           reduce using rule 22 (T -> FUNCTION .)
    MODULO          reduce using rule 22 (T -> FUNCTION .)
    OR              reduce using rule 22 (T -> FUNCTION .)
    MAS             reduce using rule 22 (T -> FUNCTION .)
    MENOS           reduce using rule 22 (T -> FUNCTION .)
    MENOR           reduce using rule 22 (T -> FUNCTION .)
    MAYOR           reduce using rule 22 (T -> FUNCTION .)
    MENOR_IGUAL     reduce using rule 22 (T -> FUNCTION .)
    MAYOR_IGUAL     reduce using rule 22 (T -> FUNCTION .)
    IGUAL           reduce using rule 22 (T -> FUNCTION .)
    DIFERENTE       reduce using rule 22 (T -> FUNCTION .)
    DOS_PUNTOS      reduce using rule 22 (T -> FUNCTION .)
    PUNTO_COMA      reduce using rule 22 (T -> FUNCTION .)
    PARENTESIS_DERECHO reduce using rule 22 (T -> FUNCTION .)
    PROCEDURE       reduce using rule 22 (T -> FUNCTION .)
    FUNCTION        reduce using rule 22 (T -> FUNCTION .)
    ID              reduce using rule 22 (T -> FUNCTION .)
    IF              reduce using rule 22 (T -> FUNCTION .)
    DO              reduce using rule 22 (T -> FUNCTION .)
    WHILE           reduce using rule 22 (T -> FUNCTION .)
    FOR             reduce using rule 22 (T -> FUNCTION .)
    END             reduce using rule 22 (T -> FUNCTION .)
    ELSE            reduce using rule 22 (T -> FUNCTION .)
    ELSIF           reduce using rule 22 (T -> FUNCTION .)


state 78

    (23) T -> ID_COMPLETO .

    AND             reduce using rule 23 (T -> ID_COMPLETO .)
    POR             reduce using rule 23 (T -> ID_COMPLETO .)
    ENTRE           reduce using rule 23 (T -> ID_COMPLETO .)
    MODULO          reduce using rule 23 (T -> ID_COMPLETO .)
    OR              reduce using rule 23 (T -> ID_COMPLETO .)
    MAS             reduce using rule 23 (T -> ID_COMPLETO .)
    MENOS           reduce using rule 23 (T -> ID_COMPLETO .)
    MENOR           reduce using rule 23 (T -> ID_COMPLETO .)
    MAYOR           reduce using rule 23 (T -> ID_COMPLETO .)
    MENOR_IGUAL     reduce using rule 23 (T -> ID_COMPLETO .)
    MAYOR_IGUAL     reduce using rule 23 (T -> ID_COMPLETO .)
    IGUAL           reduce using rule 23 (T -> ID_COMPLETO .)
    DIFERENTE       reduce using rule 23 (T -> ID_COMPLETO .)
    DOS_PUNTOS      reduce using rule 23 (T -> ID_COMPLETO .)
    PUNTO_COMA      reduce using rule 23 (T -> ID_COMPLETO .)
    PARENTESIS_DERECHO reduce using rule 23 (T -> ID_COMPLETO .)
    PROCEDURE       reduce using rule 23 (T -> ID_COMPLETO .)
    FUNCTION        reduce using rule 23 (T -> ID_COMPLETO .)
    ID              reduce using rule 23 (T -> ID_COMPLETO .)
    IF              reduce using rule 23 (T -> ID_COMPLETO .)
    DO              reduce using rule 23 (T -> ID_COMPLETO .)
    WHILE           reduce using rule 23 (T -> ID_COMPLETO .)
    FOR             reduce using rule 23 (T -> ID_COMPLETO .)
    END             reduce using rule 23 (T -> ID_COMPLETO .)
    ELSE            reduce using rule 23 (T -> ID_COMPLETO .)
    ELSIF           reduce using rule 23 (T -> ID_COMPLETO .)


state 79

    (24) T -> VALOR_INT .

    AND             reduce using rule 24 (T -> VALOR_INT .)
    POR             reduce using rule 24 (T -> VALOR_INT .)
    ENTRE           reduce using rule 24 (T -> VALOR_INT .)
    MODULO          reduce using rule 24 (T -> VALOR_INT .)
    OR              reduce using rule 24 (T -> VALOR_INT .)
    MAS             reduce using rule 24 (T -> VALOR_INT .)
    MENOS           reduce using rule 24 (T -> VALOR_INT .)
    MENOR           reduce using rule 24 (T -> VALOR_INT .)
    MAYOR           reduce using rule 24 (T -> VALOR_INT .)
    MENOR_IGUAL     reduce using rule 24 (T -> VALOR_INT .)
    MAYOR_IGUAL     reduce using rule 24 (T -> VALOR_INT .)
    IGUAL           reduce using rule 24 (T -> VALOR_INT .)
    DIFERENTE       reduce using rule 24 (T -> VALOR_INT .)
    DOS_PUNTOS      reduce using rule 24 (T -> VALOR_INT .)
    PUNTO_COMA      reduce using rule 24 (T -> VALOR_INT .)
    PARENTESIS_DERECHO reduce using rule 24 (T -> VALOR_INT .)
    PROCEDURE       reduce using rule 24 (T -> VALOR_INT .)
    FUNCTION        reduce using rule 24 (T -> VALOR_INT .)
    ID              reduce using rule 24 (T -> VALOR_INT .)
    IF              reduce using rule 24 (T -> VALOR_INT .)
    DO              reduce using rule 24 (T -> VALOR_INT .)
    WHILE           reduce using rule 24 (T -> VALOR_INT .)
    FOR             reduce using rule 24 (T -> VALOR_INT .)
    END             reduce using rule 24 (T -> VALOR_INT .)
    ELSE            reduce using rule 24 (T -> VALOR_INT .)
    ELSIF           reduce using rule 24 (T -> VALOR_INT .)


state 80

    (25) T -> VALOR_FLOAT .

    AND             reduce using rule 25 (T -> VALOR_FLOAT .)
    POR             reduce using rule 25 (T -> VALOR_FLOAT .)
    ENTRE           reduce using rule 25 (T -> VALOR_FLOAT .)
    MODULO          reduce using rule 25 (T -> VALOR_FLOAT .)
    OR              reduce using rule 25 (T -> VALOR_FLOAT .)
    MAS             reduce using rule 25 (T -> VALOR_FLOAT .)
    MENOS           reduce using rule 25 (T -> VALOR_FLOAT .)
    MENOR           reduce using rule 25 (T -> VALOR_FLOAT .)
    MAYOR           reduce using rule 25 (T -> VALOR_FLOAT .)
    MENOR_IGUAL     reduce using rule 25 (T -> VALOR_FLOAT .)
    MAYOR_IGUAL     reduce using rule 25 (T -> VALOR_FLOAT .)
    IGUAL           reduce using rule 25 (T -> VALOR_FLOAT .)
    DIFERENTE       reduce using rule 25 (T -> VALOR_FLOAT .)
    DOS_PUNTOS      reduce using rule 25 (T -> VALOR_FLOAT .)
    PUNTO_COMA      reduce using rule 25 (T -> VALOR_FLOAT .)
    PARENTESIS_DERECHO reduce using rule 25 (T -> VALOR_FLOAT .)
    PROCEDURE       reduce using rule 25 (T -> VALOR_FLOAT .)
    FUNCTION        reduce using rule 25 (T -> VALOR_FLOAT .)
    ID              reduce using rule 25 (T -> VALOR_FLOAT .)
    IF              reduce using rule 25 (T -> VALOR_FLOAT .)
    DO              reduce using rule 25 (T -> VALOR_FLOAT .)
    WHILE           reduce using rule 25 (T -> VALOR_FLOAT .)
    FOR             reduce using rule 25 (T -> VALOR_FLOAT .)
    END             reduce using rule 25 (T -> VALOR_FLOAT .)
    ELSE            reduce using rule 25 (T -> VALOR_FLOAT .)
    ELSIF           reduce using rule 25 (T -> VALOR_FLOAT .)


state 81

    (26) ID_COMPLETO -> ID .

    AND             reduce using rule 26 (ID_COMPLETO -> ID .)
    POR             reduce using rule 26 (ID_COMPLETO -> ID .)
    ENTRE           reduce using rule 26 (ID_COMPLETO -> ID .)
    MODULO          reduce using rule 26 (ID_COMPLETO -> ID .)
    OR              reduce using rule 26 (ID_COMPLETO -> ID .)
    MAS             reduce using rule 26 (ID_COMPLETO -> ID .)
    MENOS           reduce using rule 26 (ID_COMPLETO -> ID .)
    MENOR           reduce using rule 26 (ID_COMPLETO -> ID .)
    MAYOR           reduce using rule 26 (ID_COMPLETO -> ID .)
    MENOR_IGUAL     reduce using rule 26 (ID_COMPLETO -> ID .)
    MAYOR_IGUAL     reduce using rule 26 (ID_COMPLETO -> ID .)
    IGUAL           reduce using rule 26 (ID_COMPLETO -> ID .)
    DIFERENTE       reduce using rule 26 (ID_COMPLETO -> ID .)
    DOS_PUNTOS      reduce using rule 26 (ID_COMPLETO -> ID .)
    PARENTESIS_IZQUIERDO reduce using rule 26 (ID_COMPLETO -> ID .)
    PUNTO_COMA      reduce using rule 26 (ID_COMPLETO -> ID .)
    PARENTESIS_DERECHO reduce using rule 26 (ID_COMPLETO -> ID .)
    PROCEDURE       reduce using rule 26 (ID_COMPLETO -> ID .)
    FUNCTION        reduce using rule 26 (ID_COMPLETO -> ID .)
    ID              reduce using rule 26 (ID_COMPLETO -> ID .)
    IF              reduce using rule 26 (ID_COMPLETO -> ID .)
    DO              reduce using rule 26 (ID_COMPLETO -> ID .)
    WHILE           reduce using rule 26 (ID_COMPLETO -> ID .)
    FOR             reduce using rule 26 (ID_COMPLETO -> ID .)
    END             reduce using rule 26 (ID_COMPLETO -> ID .)
    ELSE            reduce using rule 26 (ID_COMPLETO -> ID .)
    ELSIF           reduce using rule 26 (ID_COMPLETO -> ID .)


state 82

    (47) DO_WHILE -> DO DOS_PUNTOS . EST WHILE E PUNTO_COMA
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

  ! shift/reduce conflict for WHILE resolved as shift
    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

  ! WHILE           [ reduce using rule 1 (empty -> .) ]

    EST                            shift and go to state 117
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 83

    (48) WHILE_ -> WHILE E . DOS_PUNTOS EST

    DOS_PUNTOS      shift and go to state 118


state 84

    (49) FOR_ -> FOR EST . PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

    PUNTO_COMA      shift and go to state 119


state 85

    (33) A -> ID ASIGNACION VALOR_INT .
    (24) T -> VALOR_INT .

  ! reduce/reduce conflict for PUNTO_COMA resolved using rule 24 (T -> VALOR_INT .)
    AND             reduce using rule 24 (T -> VALOR_INT .)
    POR             reduce using rule 24 (T -> VALOR_INT .)
    ENTRE           reduce using rule 24 (T -> VALOR_INT .)
    MODULO          reduce using rule 24 (T -> VALOR_INT .)
    OR              reduce using rule 24 (T -> VALOR_INT .)
    MAS             reduce using rule 24 (T -> VALOR_INT .)
    MENOS           reduce using rule 24 (T -> VALOR_INT .)
    MENOR           reduce using rule 24 (T -> VALOR_INT .)
    MAYOR           reduce using rule 24 (T -> VALOR_INT .)
    MENOR_IGUAL     reduce using rule 24 (T -> VALOR_INT .)
    MAYOR_IGUAL     reduce using rule 24 (T -> VALOR_INT .)
    IGUAL           reduce using rule 24 (T -> VALOR_INT .)
    DIFERENTE       reduce using rule 24 (T -> VALOR_INT .)
    PUNTO_COMA      reduce using rule 24 (T -> VALOR_INT .)

  ! PUNTO_COMA      [ reduce using rule 33 (A -> ID ASIGNACION VALOR_INT .) ]


state 86

    (34) A -> ID ASIGNACION VALOR_FLOAT .
    (25) T -> VALOR_FLOAT .

  ! reduce/reduce conflict for PUNTO_COMA resolved using rule 25 (T -> VALOR_FLOAT .)
    AND             reduce using rule 25 (T -> VALOR_FLOAT .)
    POR             reduce using rule 25 (T -> VALOR_FLOAT .)
    ENTRE           reduce using rule 25 (T -> VALOR_FLOAT .)
    MODULO          reduce using rule 25 (T -> VALOR_FLOAT .)
    OR              reduce using rule 25 (T -> VALOR_FLOAT .)
    MAS             reduce using rule 25 (T -> VALOR_FLOAT .)
    MENOS           reduce using rule 25 (T -> VALOR_FLOAT .)
    MENOR           reduce using rule 25 (T -> VALOR_FLOAT .)
    MAYOR           reduce using rule 25 (T -> VALOR_FLOAT .)
    MENOR_IGUAL     reduce using rule 25 (T -> VALOR_FLOAT .)
    MAYOR_IGUAL     reduce using rule 25 (T -> VALOR_FLOAT .)
    IGUAL           reduce using rule 25 (T -> VALOR_FLOAT .)
    DIFERENTE       reduce using rule 25 (T -> VALOR_FLOAT .)
    PUNTO_COMA      reduce using rule 25 (T -> VALOR_FLOAT .)

  ! PUNTO_COMA      [ reduce using rule 34 (A -> ID ASIGNACION VALOR_FLOAT .) ]


state 87

    (35) A -> ID ASIGNACION E .

    PUNTO_COMA      reduce using rule 35 (A -> ID ASIGNACION E .)


state 88

    (36) A -> ID ASIGNACION ID_COMPLETO . PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (23) T -> ID_COMPLETO .

    PARENTESIS_IZQUIERDO shift and go to state 120
    AND             reduce using rule 23 (T -> ID_COMPLETO .)
    POR             reduce using rule 23 (T -> ID_COMPLETO .)
    ENTRE           reduce using rule 23 (T -> ID_COMPLETO .)
    MODULO          reduce using rule 23 (T -> ID_COMPLETO .)
    OR              reduce using rule 23 (T -> ID_COMPLETO .)
    MAS             reduce using rule 23 (T -> ID_COMPLETO .)
    MENOS           reduce using rule 23 (T -> ID_COMPLETO .)
    MENOR           reduce using rule 23 (T -> ID_COMPLETO .)
    MAYOR           reduce using rule 23 (T -> ID_COMPLETO .)
    MENOR_IGUAL     reduce using rule 23 (T -> ID_COMPLETO .)
    MAYOR_IGUAL     reduce using rule 23 (T -> ID_COMPLETO .)
    IGUAL           reduce using rule 23 (T -> ID_COMPLETO .)
    DIFERENTE       reduce using rule 23 (T -> ID_COMPLETO .)
    PUNTO_COMA      reduce using rule 23 (T -> ID_COMPLETO .)


state 89

    (54) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END . PROCEDURE

    PROCEDURE       shift and go to state 121


state 90

    (55) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN . PUNTO_COMA END PROCEDURE PUNTO_COMA

    PUNTO_COMA      shift and go to state 122


state 91

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN . ID PUNTO_COMA END FUNCTION PUNTO_COMA

    ID              shift and go to state 123


state 92

    (41) EST -> PROCEDURE PUNTO_COMA EST .

    END             reduce using rule 41 (EST -> PROCEDURE PUNTO_COMA EST .)
    RETURN          reduce using rule 41 (EST -> PROCEDURE PUNTO_COMA EST .)
    PUNTO_COMA      reduce using rule 41 (EST -> PROCEDURE PUNTO_COMA EST .)
    WHILE           reduce using rule 41 (EST -> PROCEDURE PUNTO_COMA EST .)
    ELSE            reduce using rule 41 (EST -> PROCEDURE PUNTO_COMA EST .)
    ELSIF           reduce using rule 41 (EST -> PROCEDURE PUNTO_COMA EST .)
    END_LOOP        reduce using rule 41 (EST -> PROCEDURE PUNTO_COMA EST .)
    DOS_PUNTOS      reduce using rule 41 (EST -> PROCEDURE PUNTO_COMA EST .)


state 93

    (57) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE . PUNTO_COMA

    PUNTO_COMA      shift and go to state 124


state 94

    (58) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA . END PROCEDURE PUNTO_COMA

    END             shift and go to state 125


state 95

    (38) EST -> LOOP END_LOOP PUNTO_COMA . EST
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

  ! shift/reduce conflict for WHILE resolved as shift
    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PUNTO_COMA      reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    ELSIF           reduce using rule 1 (empty -> .)
    END_LOOP        reduce using rule 1 (empty -> .)
    DOS_PUNTOS      reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

  ! WHILE           [ reduce using rule 1 (empty -> .) ]

    LOOP                           shift and go to state 45
    EST                            shift and go to state 126
    empty                          shift and go to state 44
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 96

    (39) EST -> IF_ END_IF PUNTO_COMA . EST
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

  ! shift/reduce conflict for WHILE resolved as shift
    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PUNTO_COMA      reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    ELSIF           reduce using rule 1 (empty -> .)
    END_LOOP        reduce using rule 1 (empty -> .)
    DOS_PUNTOS      reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

  ! WHILE           [ reduce using rule 1 (empty -> .) ]

    IF_                            shift and go to state 46
    EST                            shift and go to state 127
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 97

    (40) EST -> A PUNTO_COMA EST .

    END             reduce using rule 40 (EST -> A PUNTO_COMA EST .)
    RETURN          reduce using rule 40 (EST -> A PUNTO_COMA EST .)
    PUNTO_COMA      reduce using rule 40 (EST -> A PUNTO_COMA EST .)
    WHILE           reduce using rule 40 (EST -> A PUNTO_COMA EST .)
    ELSE            reduce using rule 40 (EST -> A PUNTO_COMA EST .)
    ELSIF           reduce using rule 40 (EST -> A PUNTO_COMA EST .)
    END_LOOP        reduce using rule 40 (EST -> A PUNTO_COMA EST .)
    DOS_PUNTOS      reduce using rule 40 (EST -> A PUNTO_COMA EST .)


state 98

    (42) EST -> FUNCTION PUNTO_COMA EST .

    END             reduce using rule 42 (EST -> FUNCTION PUNTO_COMA EST .)
    RETURN          reduce using rule 42 (EST -> FUNCTION PUNTO_COMA EST .)
    PUNTO_COMA      reduce using rule 42 (EST -> FUNCTION PUNTO_COMA EST .)
    WHILE           reduce using rule 42 (EST -> FUNCTION PUNTO_COMA EST .)
    ELSE            reduce using rule 42 (EST -> FUNCTION PUNTO_COMA EST .)
    ELSIF           reduce using rule 42 (EST -> FUNCTION PUNTO_COMA EST .)
    END_LOOP        reduce using rule 42 (EST -> FUNCTION PUNTO_COMA EST .)
    DOS_PUNTOS      reduce using rule 42 (EST -> FUNCTION PUNTO_COMA EST .)


state 99

    (43) EST -> ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO . PUNTO_COMA EST

    PUNTO_COMA      shift and go to state 128


state 100

    (50) IF_ -> IF E DOS_PUNTOS . EST ELSIF_
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    ELSIF           reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    EST                            shift and go to state 129
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 101

    (9) E -> E2 C . E2
    (10) E2 -> . E3
    (11) E2 -> . E2 OR E3
    (12) E2 -> . E2 MAS E3
    (13) E2 -> . E2 MENOS E3
    (14) E3 -> . E4
    (15) E3 -> . E3 AND E4
    (16) E3 -> . E3 POR E4
    (17) E3 -> . E3 ENTRE E4
    (18) E3 -> . E3 MODULO E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E2                             shift and go to state 130
    E3                             shift and go to state 72
    E4                             shift and go to state 73
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 102

    (11) E2 -> E2 OR . E3
    (14) E3 -> . E4
    (15) E3 -> . E3 AND E4
    (16) E3 -> . E3 POR E4
    (17) E3 -> . E3 ENTRE E4
    (18) E3 -> . E3 MODULO E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E3                             shift and go to state 131
    E4                             shift and go to state 73
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 103

    (12) E2 -> E2 MAS . E3
    (14) E3 -> . E4
    (15) E3 -> . E3 AND E4
    (16) E3 -> . E3 POR E4
    (17) E3 -> . E3 ENTRE E4
    (18) E3 -> . E3 MODULO E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E3                             shift and go to state 132
    E4                             shift and go to state 73
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 104

    (13) E2 -> E2 MENOS . E3
    (14) E3 -> . E4
    (15) E3 -> . E3 AND E4
    (16) E3 -> . E3 POR E4
    (17) E3 -> . E3 ENTRE E4
    (18) E3 -> . E3 MODULO E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E3                             shift and go to state 133
    E4                             shift and go to state 73
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 105

    (2) C -> MENOR .

    NOT             reduce using rule 2 (C -> MENOR .)
    PARENTESIS_IZQUIERDO reduce using rule 2 (C -> MENOR .)
    FUNCTION        reduce using rule 2 (C -> MENOR .)
    VALOR_INT       reduce using rule 2 (C -> MENOR .)
    VALOR_FLOAT     reduce using rule 2 (C -> MENOR .)
    ID              reduce using rule 2 (C -> MENOR .)


state 106

    (3) C -> MAYOR .

    NOT             reduce using rule 3 (C -> MAYOR .)
    PARENTESIS_IZQUIERDO reduce using rule 3 (C -> MAYOR .)
    FUNCTION        reduce using rule 3 (C -> MAYOR .)
    VALOR_INT       reduce using rule 3 (C -> MAYOR .)
    VALOR_FLOAT     reduce using rule 3 (C -> MAYOR .)
    ID              reduce using rule 3 (C -> MAYOR .)


state 107

    (4) C -> MENOR_IGUAL .

    NOT             reduce using rule 4 (C -> MENOR_IGUAL .)
    PARENTESIS_IZQUIERDO reduce using rule 4 (C -> MENOR_IGUAL .)
    FUNCTION        reduce using rule 4 (C -> MENOR_IGUAL .)
    VALOR_INT       reduce using rule 4 (C -> MENOR_IGUAL .)
    VALOR_FLOAT     reduce using rule 4 (C -> MENOR_IGUAL .)
    ID              reduce using rule 4 (C -> MENOR_IGUAL .)


state 108

    (5) C -> MAYOR_IGUAL .

    NOT             reduce using rule 5 (C -> MAYOR_IGUAL .)
    PARENTESIS_IZQUIERDO reduce using rule 5 (C -> MAYOR_IGUAL .)
    FUNCTION        reduce using rule 5 (C -> MAYOR_IGUAL .)
    VALOR_INT       reduce using rule 5 (C -> MAYOR_IGUAL .)
    VALOR_FLOAT     reduce using rule 5 (C -> MAYOR_IGUAL .)
    ID              reduce using rule 5 (C -> MAYOR_IGUAL .)


state 109

    (6) C -> IGUAL .

    NOT             reduce using rule 6 (C -> IGUAL .)
    PARENTESIS_IZQUIERDO reduce using rule 6 (C -> IGUAL .)
    FUNCTION        reduce using rule 6 (C -> IGUAL .)
    VALOR_INT       reduce using rule 6 (C -> IGUAL .)
    VALOR_FLOAT     reduce using rule 6 (C -> IGUAL .)
    ID              reduce using rule 6 (C -> IGUAL .)


state 110

    (7) C -> DIFERENTE .

    NOT             reduce using rule 7 (C -> DIFERENTE .)
    PARENTESIS_IZQUIERDO reduce using rule 7 (C -> DIFERENTE .)
    FUNCTION        reduce using rule 7 (C -> DIFERENTE .)
    VALOR_INT       reduce using rule 7 (C -> DIFERENTE .)
    VALOR_FLOAT     reduce using rule 7 (C -> DIFERENTE .)
    ID              reduce using rule 7 (C -> DIFERENTE .)


state 111

    (15) E3 -> E3 AND . E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E4                             shift and go to state 134
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 112

    (16) E3 -> E3 POR . E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E4                             shift and go to state 135
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 113

    (17) E3 -> E3 ENTRE . E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E4                             shift and go to state 136
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 114

    (18) E3 -> E3 MODULO . E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E4                             shift and go to state 137
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 115

    (20) E4 -> NOT T .

    AND             reduce using rule 20 (E4 -> NOT T .)
    POR             reduce using rule 20 (E4 -> NOT T .)
    ENTRE           reduce using rule 20 (E4 -> NOT T .)
    MODULO          reduce using rule 20 (E4 -> NOT T .)
    OR              reduce using rule 20 (E4 -> NOT T .)
    MAS             reduce using rule 20 (E4 -> NOT T .)
    MENOS           reduce using rule 20 (E4 -> NOT T .)
    MENOR           reduce using rule 20 (E4 -> NOT T .)
    MAYOR           reduce using rule 20 (E4 -> NOT T .)
    MENOR_IGUAL     reduce using rule 20 (E4 -> NOT T .)
    MAYOR_IGUAL     reduce using rule 20 (E4 -> NOT T .)
    IGUAL           reduce using rule 20 (E4 -> NOT T .)
    DIFERENTE       reduce using rule 20 (E4 -> NOT T .)
    DOS_PUNTOS      reduce using rule 20 (E4 -> NOT T .)
    PUNTO_COMA      reduce using rule 20 (E4 -> NOT T .)
    PARENTESIS_DERECHO reduce using rule 20 (E4 -> NOT T .)
    PROCEDURE       reduce using rule 20 (E4 -> NOT T .)
    FUNCTION        reduce using rule 20 (E4 -> NOT T .)
    ID              reduce using rule 20 (E4 -> NOT T .)
    IF              reduce using rule 20 (E4 -> NOT T .)
    DO              reduce using rule 20 (E4 -> NOT T .)
    WHILE           reduce using rule 20 (E4 -> NOT T .)
    FOR             reduce using rule 20 (E4 -> NOT T .)
    END             reduce using rule 20 (E4 -> NOT T .)
    ELSE            reduce using rule 20 (E4 -> NOT T .)
    ELSIF           reduce using rule 20 (E4 -> NOT T .)


state 116

    (21) T -> PARENTESIS_IZQUIERDO E . PARENTESIS_DERECHO

    PARENTESIS_DERECHO shift and go to state 138


state 117

    (47) DO_WHILE -> DO DOS_PUNTOS EST . WHILE E PUNTO_COMA

    WHILE           shift and go to state 139


state 118

    (48) WHILE_ -> WHILE E DOS_PUNTOS . EST
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END_LOOP        reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    EST                            shift and go to state 140
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 119

    (49) FOR_ -> FOR EST PUNTO_COMA . E PUNTO_COMA EST DOS_PUNTOS EST
    (8) E -> . E2
    (9) E -> . E2 C E2
    (10) E2 -> . E3
    (11) E2 -> . E2 OR E3
    (12) E2 -> . E2 MAS E3
    (13) E2 -> . E2 MENOS E3
    (14) E3 -> . E4
    (15) E3 -> . E3 AND E4
    (16) E3 -> . E3 POR E4
    (17) E3 -> . E3 ENTRE E4
    (18) E3 -> . E3 MODULO E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E                              shift and go to state 141
    E2                             shift and go to state 71
    E3                             shift and go to state 72
    E4                             shift and go to state 73
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 120

    (36) A -> ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO . PARENTESIS_DERECHO

    PARENTESIS_DERECHO shift and go to state 142


state 121

    (54) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE .

    PROCEDURE       reduce using rule 54 (P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE .)
    INT             reduce using rule 54 (P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE .)
    FLOAT           reduce using rule 54 (P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE .)
    $end            reduce using rule 54 (P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE .)


state 122

    (55) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA . END PROCEDURE PUNTO_COMA

    END             shift and go to state 143


state 123

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID . PUNTO_COMA END FUNCTION PUNTO_COMA

    PUNTO_COMA      shift and go to state 144


state 124

    (57) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA .

    PROCEDURE       reduce using rule 57 (MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA .)
    INT             reduce using rule 57 (MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA .)
    FLOAT           reduce using rule 57 (MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA .)
    $end            reduce using rule 57 (MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST END PROCEDURE PUNTO_COMA .)


state 125

    (58) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END . PROCEDURE PUNTO_COMA

    PROCEDURE       shift and go to state 145


state 126

    (38) EST -> LOOP END_LOOP PUNTO_COMA EST .

    END             reduce using rule 38 (EST -> LOOP END_LOOP PUNTO_COMA EST .)
    RETURN          reduce using rule 38 (EST -> LOOP END_LOOP PUNTO_COMA EST .)
    PUNTO_COMA      reduce using rule 38 (EST -> LOOP END_LOOP PUNTO_COMA EST .)
    WHILE           reduce using rule 38 (EST -> LOOP END_LOOP PUNTO_COMA EST .)
    ELSE            reduce using rule 38 (EST -> LOOP END_LOOP PUNTO_COMA EST .)
    ELSIF           reduce using rule 38 (EST -> LOOP END_LOOP PUNTO_COMA EST .)
    END_LOOP        reduce using rule 38 (EST -> LOOP END_LOOP PUNTO_COMA EST .)
    DOS_PUNTOS      reduce using rule 38 (EST -> LOOP END_LOOP PUNTO_COMA EST .)


state 127

    (39) EST -> IF_ END_IF PUNTO_COMA EST .

    END             reduce using rule 39 (EST -> IF_ END_IF PUNTO_COMA EST .)
    RETURN          reduce using rule 39 (EST -> IF_ END_IF PUNTO_COMA EST .)
    PUNTO_COMA      reduce using rule 39 (EST -> IF_ END_IF PUNTO_COMA EST .)
    WHILE           reduce using rule 39 (EST -> IF_ END_IF PUNTO_COMA EST .)
    ELSE            reduce using rule 39 (EST -> IF_ END_IF PUNTO_COMA EST .)
    ELSIF           reduce using rule 39 (EST -> IF_ END_IF PUNTO_COMA EST .)
    END_LOOP        reduce using rule 39 (EST -> IF_ END_IF PUNTO_COMA EST .)
    DOS_PUNTOS      reduce using rule 39 (EST -> IF_ END_IF PUNTO_COMA EST .)


state 128

    (43) EST -> ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA . EST
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

  ! shift/reduce conflict for WHILE resolved as shift
    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PUNTO_COMA      reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    ELSIF           reduce using rule 1 (empty -> .)
    END_LOOP        reduce using rule 1 (empty -> .)
    DOS_PUNTOS      reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

  ! WHILE           [ reduce using rule 1 (empty -> .) ]

    EST                            shift and go to state 146
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 129

    (50) IF_ -> IF E DOS_PUNTOS EST . ELSIF_
    (51) ELSIF_ -> . END IF PUNTO_COMA
    (52) ELSIF_ -> . ELSE DOS_PUNTOS EST END IF PUNTO_COMA
    (53) ELSIF_ -> . ELSIF DOS_PUNTOS E EST ELSIF_

    END             shift and go to state 148
    ELSE            shift and go to state 149
    ELSIF           shift and go to state 150

    ELSIF_                         shift and go to state 147

state 130

    (9) E -> E2 C E2 .
    (11) E2 -> E2 . OR E3
    (12) E2 -> E2 . MAS E3
    (13) E2 -> E2 . MENOS E3

    DOS_PUNTOS      reduce using rule 9 (E -> E2 C E2 .)
    PUNTO_COMA      reduce using rule 9 (E -> E2 C E2 .)
    PARENTESIS_DERECHO reduce using rule 9 (E -> E2 C E2 .)
    PROCEDURE       reduce using rule 9 (E -> E2 C E2 .)
    FUNCTION        reduce using rule 9 (E -> E2 C E2 .)
    ID              reduce using rule 9 (E -> E2 C E2 .)
    IF              reduce using rule 9 (E -> E2 C E2 .)
    DO              reduce using rule 9 (E -> E2 C E2 .)
    WHILE           reduce using rule 9 (E -> E2 C E2 .)
    FOR             reduce using rule 9 (E -> E2 C E2 .)
    END             reduce using rule 9 (E -> E2 C E2 .)
    ELSE            reduce using rule 9 (E -> E2 C E2 .)
    ELSIF           reduce using rule 9 (E -> E2 C E2 .)
    OR              shift and go to state 102
    MAS             shift and go to state 103
    MENOS           shift and go to state 104


state 131

    (11) E2 -> E2 OR E3 .
    (15) E3 -> E3 . AND E4
    (16) E3 -> E3 . POR E4
    (17) E3 -> E3 . ENTRE E4
    (18) E3 -> E3 . MODULO E4

    OR              reduce using rule 11 (E2 -> E2 OR E3 .)
    MAS             reduce using rule 11 (E2 -> E2 OR E3 .)
    MENOS           reduce using rule 11 (E2 -> E2 OR E3 .)
    MENOR           reduce using rule 11 (E2 -> E2 OR E3 .)
    MAYOR           reduce using rule 11 (E2 -> E2 OR E3 .)
    MENOR_IGUAL     reduce using rule 11 (E2 -> E2 OR E3 .)
    MAYOR_IGUAL     reduce using rule 11 (E2 -> E2 OR E3 .)
    IGUAL           reduce using rule 11 (E2 -> E2 OR E3 .)
    DIFERENTE       reduce using rule 11 (E2 -> E2 OR E3 .)
    DOS_PUNTOS      reduce using rule 11 (E2 -> E2 OR E3 .)
    PUNTO_COMA      reduce using rule 11 (E2 -> E2 OR E3 .)
    PARENTESIS_DERECHO reduce using rule 11 (E2 -> E2 OR E3 .)
    PROCEDURE       reduce using rule 11 (E2 -> E2 OR E3 .)
    FUNCTION        reduce using rule 11 (E2 -> E2 OR E3 .)
    ID              reduce using rule 11 (E2 -> E2 OR E3 .)
    IF              reduce using rule 11 (E2 -> E2 OR E3 .)
    DO              reduce using rule 11 (E2 -> E2 OR E3 .)
    WHILE           reduce using rule 11 (E2 -> E2 OR E3 .)
    FOR             reduce using rule 11 (E2 -> E2 OR E3 .)
    END             reduce using rule 11 (E2 -> E2 OR E3 .)
    ELSE            reduce using rule 11 (E2 -> E2 OR E3 .)
    ELSIF           reduce using rule 11 (E2 -> E2 OR E3 .)
    AND             shift and go to state 111
    POR             shift and go to state 112
    ENTRE           shift and go to state 113
    MODULO          shift and go to state 114


state 132

    (12) E2 -> E2 MAS E3 .
    (15) E3 -> E3 . AND E4
    (16) E3 -> E3 . POR E4
    (17) E3 -> E3 . ENTRE E4
    (18) E3 -> E3 . MODULO E4

    OR              reduce using rule 12 (E2 -> E2 MAS E3 .)
    MAS             reduce using rule 12 (E2 -> E2 MAS E3 .)
    MENOS           reduce using rule 12 (E2 -> E2 MAS E3 .)
    MENOR           reduce using rule 12 (E2 -> E2 MAS E3 .)
    MAYOR           reduce using rule 12 (E2 -> E2 MAS E3 .)
    MENOR_IGUAL     reduce using rule 12 (E2 -> E2 MAS E3 .)
    MAYOR_IGUAL     reduce using rule 12 (E2 -> E2 MAS E3 .)
    IGUAL           reduce using rule 12 (E2 -> E2 MAS E3 .)
    DIFERENTE       reduce using rule 12 (E2 -> E2 MAS E3 .)
    DOS_PUNTOS      reduce using rule 12 (E2 -> E2 MAS E3 .)
    PUNTO_COMA      reduce using rule 12 (E2 -> E2 MAS E3 .)
    PARENTESIS_DERECHO reduce using rule 12 (E2 -> E2 MAS E3 .)
    PROCEDURE       reduce using rule 12 (E2 -> E2 MAS E3 .)
    FUNCTION        reduce using rule 12 (E2 -> E2 MAS E3 .)
    ID              reduce using rule 12 (E2 -> E2 MAS E3 .)
    IF              reduce using rule 12 (E2 -> E2 MAS E3 .)
    DO              reduce using rule 12 (E2 -> E2 MAS E3 .)
    WHILE           reduce using rule 12 (E2 -> E2 MAS E3 .)
    FOR             reduce using rule 12 (E2 -> E2 MAS E3 .)
    END             reduce using rule 12 (E2 -> E2 MAS E3 .)
    ELSE            reduce using rule 12 (E2 -> E2 MAS E3 .)
    ELSIF           reduce using rule 12 (E2 -> E2 MAS E3 .)
    AND             shift and go to state 111
    POR             shift and go to state 112
    ENTRE           shift and go to state 113
    MODULO          shift and go to state 114


state 133

    (13) E2 -> E2 MENOS E3 .
    (15) E3 -> E3 . AND E4
    (16) E3 -> E3 . POR E4
    (17) E3 -> E3 . ENTRE E4
    (18) E3 -> E3 . MODULO E4

    OR              reduce using rule 13 (E2 -> E2 MENOS E3 .)
    MAS             reduce using rule 13 (E2 -> E2 MENOS E3 .)
    MENOS           reduce using rule 13 (E2 -> E2 MENOS E3 .)
    MENOR           reduce using rule 13 (E2 -> E2 MENOS E3 .)
    MAYOR           reduce using rule 13 (E2 -> E2 MENOS E3 .)
    MENOR_IGUAL     reduce using rule 13 (E2 -> E2 MENOS E3 .)
    MAYOR_IGUAL     reduce using rule 13 (E2 -> E2 MENOS E3 .)
    IGUAL           reduce using rule 13 (E2 -> E2 MENOS E3 .)
    DIFERENTE       reduce using rule 13 (E2 -> E2 MENOS E3 .)
    DOS_PUNTOS      reduce using rule 13 (E2 -> E2 MENOS E3 .)
    PUNTO_COMA      reduce using rule 13 (E2 -> E2 MENOS E3 .)
    PARENTESIS_DERECHO reduce using rule 13 (E2 -> E2 MENOS E3 .)
    PROCEDURE       reduce using rule 13 (E2 -> E2 MENOS E3 .)
    FUNCTION        reduce using rule 13 (E2 -> E2 MENOS E3 .)
    ID              reduce using rule 13 (E2 -> E2 MENOS E3 .)
    IF              reduce using rule 13 (E2 -> E2 MENOS E3 .)
    DO              reduce using rule 13 (E2 -> E2 MENOS E3 .)
    WHILE           reduce using rule 13 (E2 -> E2 MENOS E3 .)
    FOR             reduce using rule 13 (E2 -> E2 MENOS E3 .)
    END             reduce using rule 13 (E2 -> E2 MENOS E3 .)
    ELSE            reduce using rule 13 (E2 -> E2 MENOS E3 .)
    ELSIF           reduce using rule 13 (E2 -> E2 MENOS E3 .)
    AND             shift and go to state 111
    POR             shift and go to state 112
    ENTRE           shift and go to state 113
    MODULO          shift and go to state 114


state 134

    (15) E3 -> E3 AND E4 .

    AND             reduce using rule 15 (E3 -> E3 AND E4 .)
    POR             reduce using rule 15 (E3 -> E3 AND E4 .)
    ENTRE           reduce using rule 15 (E3 -> E3 AND E4 .)
    MODULO          reduce using rule 15 (E3 -> E3 AND E4 .)
    OR              reduce using rule 15 (E3 -> E3 AND E4 .)
    MAS             reduce using rule 15 (E3 -> E3 AND E4 .)
    MENOS           reduce using rule 15 (E3 -> E3 AND E4 .)
    MENOR           reduce using rule 15 (E3 -> E3 AND E4 .)
    MAYOR           reduce using rule 15 (E3 -> E3 AND E4 .)
    MENOR_IGUAL     reduce using rule 15 (E3 -> E3 AND E4 .)
    MAYOR_IGUAL     reduce using rule 15 (E3 -> E3 AND E4 .)
    IGUAL           reduce using rule 15 (E3 -> E3 AND E4 .)
    DIFERENTE       reduce using rule 15 (E3 -> E3 AND E4 .)
    DOS_PUNTOS      reduce using rule 15 (E3 -> E3 AND E4 .)
    PUNTO_COMA      reduce using rule 15 (E3 -> E3 AND E4 .)
    PARENTESIS_DERECHO reduce using rule 15 (E3 -> E3 AND E4 .)
    PROCEDURE       reduce using rule 15 (E3 -> E3 AND E4 .)
    FUNCTION        reduce using rule 15 (E3 -> E3 AND E4 .)
    ID              reduce using rule 15 (E3 -> E3 AND E4 .)
    IF              reduce using rule 15 (E3 -> E3 AND E4 .)
    DO              reduce using rule 15 (E3 -> E3 AND E4 .)
    WHILE           reduce using rule 15 (E3 -> E3 AND E4 .)
    FOR             reduce using rule 15 (E3 -> E3 AND E4 .)
    END             reduce using rule 15 (E3 -> E3 AND E4 .)
    ELSE            reduce using rule 15 (E3 -> E3 AND E4 .)
    ELSIF           reduce using rule 15 (E3 -> E3 AND E4 .)


state 135

    (16) E3 -> E3 POR E4 .

    AND             reduce using rule 16 (E3 -> E3 POR E4 .)
    POR             reduce using rule 16 (E3 -> E3 POR E4 .)
    ENTRE           reduce using rule 16 (E3 -> E3 POR E4 .)
    MODULO          reduce using rule 16 (E3 -> E3 POR E4 .)
    OR              reduce using rule 16 (E3 -> E3 POR E4 .)
    MAS             reduce using rule 16 (E3 -> E3 POR E4 .)
    MENOS           reduce using rule 16 (E3 -> E3 POR E4 .)
    MENOR           reduce using rule 16 (E3 -> E3 POR E4 .)
    MAYOR           reduce using rule 16 (E3 -> E3 POR E4 .)
    MENOR_IGUAL     reduce using rule 16 (E3 -> E3 POR E4 .)
    MAYOR_IGUAL     reduce using rule 16 (E3 -> E3 POR E4 .)
    IGUAL           reduce using rule 16 (E3 -> E3 POR E4 .)
    DIFERENTE       reduce using rule 16 (E3 -> E3 POR E4 .)
    DOS_PUNTOS      reduce using rule 16 (E3 -> E3 POR E4 .)
    PUNTO_COMA      reduce using rule 16 (E3 -> E3 POR E4 .)
    PARENTESIS_DERECHO reduce using rule 16 (E3 -> E3 POR E4 .)
    PROCEDURE       reduce using rule 16 (E3 -> E3 POR E4 .)
    FUNCTION        reduce using rule 16 (E3 -> E3 POR E4 .)
    ID              reduce using rule 16 (E3 -> E3 POR E4 .)
    IF              reduce using rule 16 (E3 -> E3 POR E4 .)
    DO              reduce using rule 16 (E3 -> E3 POR E4 .)
    WHILE           reduce using rule 16 (E3 -> E3 POR E4 .)
    FOR             reduce using rule 16 (E3 -> E3 POR E4 .)
    END             reduce using rule 16 (E3 -> E3 POR E4 .)
    ELSE            reduce using rule 16 (E3 -> E3 POR E4 .)
    ELSIF           reduce using rule 16 (E3 -> E3 POR E4 .)


state 136

    (17) E3 -> E3 ENTRE E4 .

    AND             reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    POR             reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    ENTRE           reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    MODULO          reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    OR              reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    MAS             reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    MENOS           reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    MENOR           reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    MAYOR           reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    MENOR_IGUAL     reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    MAYOR_IGUAL     reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    IGUAL           reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    DIFERENTE       reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    DOS_PUNTOS      reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    PUNTO_COMA      reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    PARENTESIS_DERECHO reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    PROCEDURE       reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    FUNCTION        reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    ID              reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    IF              reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    DO              reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    WHILE           reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    FOR             reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    END             reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    ELSE            reduce using rule 17 (E3 -> E3 ENTRE E4 .)
    ELSIF           reduce using rule 17 (E3 -> E3 ENTRE E4 .)


state 137

    (18) E3 -> E3 MODULO E4 .

    AND             reduce using rule 18 (E3 -> E3 MODULO E4 .)
    POR             reduce using rule 18 (E3 -> E3 MODULO E4 .)
    ENTRE           reduce using rule 18 (E3 -> E3 MODULO E4 .)
    MODULO          reduce using rule 18 (E3 -> E3 MODULO E4 .)
    OR              reduce using rule 18 (E3 -> E3 MODULO E4 .)
    MAS             reduce using rule 18 (E3 -> E3 MODULO E4 .)
    MENOS           reduce using rule 18 (E3 -> E3 MODULO E4 .)
    MENOR           reduce using rule 18 (E3 -> E3 MODULO E4 .)
    MAYOR           reduce using rule 18 (E3 -> E3 MODULO E4 .)
    MENOR_IGUAL     reduce using rule 18 (E3 -> E3 MODULO E4 .)
    MAYOR_IGUAL     reduce using rule 18 (E3 -> E3 MODULO E4 .)
    IGUAL           reduce using rule 18 (E3 -> E3 MODULO E4 .)
    DIFERENTE       reduce using rule 18 (E3 -> E3 MODULO E4 .)
    DOS_PUNTOS      reduce using rule 18 (E3 -> E3 MODULO E4 .)
    PUNTO_COMA      reduce using rule 18 (E3 -> E3 MODULO E4 .)
    PARENTESIS_DERECHO reduce using rule 18 (E3 -> E3 MODULO E4 .)
    PROCEDURE       reduce using rule 18 (E3 -> E3 MODULO E4 .)
    FUNCTION        reduce using rule 18 (E3 -> E3 MODULO E4 .)
    ID              reduce using rule 18 (E3 -> E3 MODULO E4 .)
    IF              reduce using rule 18 (E3 -> E3 MODULO E4 .)
    DO              reduce using rule 18 (E3 -> E3 MODULO E4 .)
    WHILE           reduce using rule 18 (E3 -> E3 MODULO E4 .)
    FOR             reduce using rule 18 (E3 -> E3 MODULO E4 .)
    END             reduce using rule 18 (E3 -> E3 MODULO E4 .)
    ELSE            reduce using rule 18 (E3 -> E3 MODULO E4 .)
    ELSIF           reduce using rule 18 (E3 -> E3 MODULO E4 .)


state 138

    (21) T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .

    AND             reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    POR             reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    ENTRE           reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    MODULO          reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    OR              reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    MAS             reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    MENOS           reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    MENOR           reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    MAYOR           reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    MENOR_IGUAL     reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    MAYOR_IGUAL     reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    IGUAL           reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    DIFERENTE       reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    DOS_PUNTOS      reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    PUNTO_COMA      reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    PARENTESIS_DERECHO reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    PROCEDURE       reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    FUNCTION        reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    ID              reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    IF              reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    DO              reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    WHILE           reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    FOR             reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    END             reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    ELSE            reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)
    ELSIF           reduce using rule 21 (T -> PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO .)


state 139

    (47) DO_WHILE -> DO DOS_PUNTOS EST WHILE . E PUNTO_COMA
    (8) E -> . E2
    (9) E -> . E2 C E2
    (10) E2 -> . E3
    (11) E2 -> . E2 OR E3
    (12) E2 -> . E2 MAS E3
    (13) E2 -> . E2 MENOS E3
    (14) E3 -> . E4
    (15) E3 -> . E3 AND E4
    (16) E3 -> . E3 POR E4
    (17) E3 -> . E3 ENTRE E4
    (18) E3 -> . E3 MODULO E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E                              shift and go to state 151
    E2                             shift and go to state 71
    E3                             shift and go to state 72
    E4                             shift and go to state 73
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 140

    (48) WHILE_ -> WHILE E DOS_PUNTOS EST .

    END_LOOP        reduce using rule 48 (WHILE_ -> WHILE E DOS_PUNTOS EST .)


state 141

    (49) FOR_ -> FOR EST PUNTO_COMA E . PUNTO_COMA EST DOS_PUNTOS EST

    PUNTO_COMA      shift and go to state 152


state 142

    (36) A -> ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO .

    PUNTO_COMA      reduce using rule 36 (A -> ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO .)


state 143

    (55) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END . PROCEDURE PUNTO_COMA

    PROCEDURE       shift and go to state 153


state 144

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA . END FUNCTION PUNTO_COMA

    END             shift and go to state 154


state 145

    (58) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE . PUNTO_COMA

    PUNTO_COMA      shift and go to state 155


state 146

    (43) EST -> ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST .

    END             reduce using rule 43 (EST -> ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST .)
    RETURN          reduce using rule 43 (EST -> ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST .)
    PUNTO_COMA      reduce using rule 43 (EST -> ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST .)
    WHILE           reduce using rule 43 (EST -> ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST .)
    ELSE            reduce using rule 43 (EST -> ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST .)
    ELSIF           reduce using rule 43 (EST -> ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST .)
    END_LOOP        reduce using rule 43 (EST -> ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST .)
    DOS_PUNTOS      reduce using rule 43 (EST -> ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST .)


state 147

    (50) IF_ -> IF E DOS_PUNTOS EST ELSIF_ .

    END_IF          reduce using rule 50 (IF_ -> IF E DOS_PUNTOS EST ELSIF_ .)


state 148

    (51) ELSIF_ -> END . IF PUNTO_COMA

    IF              shift and go to state 156


state 149

    (52) ELSIF_ -> ELSE . DOS_PUNTOS EST END IF PUNTO_COMA

    DOS_PUNTOS      shift and go to state 157


state 150

    (53) ELSIF_ -> ELSIF . DOS_PUNTOS E EST ELSIF_

    DOS_PUNTOS      shift and go to state 158


state 151

    (47) DO_WHILE -> DO DOS_PUNTOS EST WHILE E . PUNTO_COMA

    PUNTO_COMA      shift and go to state 159


state 152

    (49) FOR_ -> FOR EST PUNTO_COMA E PUNTO_COMA . EST DOS_PUNTOS EST
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    DOS_PUNTOS      reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    EST                            shift and go to state 160
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 153

    (55) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE . PUNTO_COMA

    PUNTO_COMA      shift and go to state 161


state 154

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END . FUNCTION PUNTO_COMA

    FUNCTION        shift and go to state 162


state 155

    (58) MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA .

    PROCEDURE       reduce using rule 58 (MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA .)
    INT             reduce using rule 58 (MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA .)
    FLOAT           reduce using rule 58 (MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA .)
    $end            reduce using rule 58 (MP -> PROCEDURE MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA .)


state 156

    (51) ELSIF_ -> END IF . PUNTO_COMA

    PUNTO_COMA      shift and go to state 163


state 157

    (52) ELSIF_ -> ELSE DOS_PUNTOS . EST END IF PUNTO_COMA
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    EST                            shift and go to state 164
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 158

    (53) ELSIF_ -> ELSIF DOS_PUNTOS . E EST ELSIF_
    (8) E -> . E2
    (9) E -> . E2 C E2
    (10) E2 -> . E3
    (11) E2 -> . E2 OR E3
    (12) E2 -> . E2 MAS E3
    (13) E2 -> . E2 MENOS E3
    (14) E3 -> . E4
    (15) E3 -> . E3 AND E4
    (16) E3 -> . E3 POR E4
    (17) E3 -> . E3 ENTRE E4
    (18) E3 -> . E3 MODULO E4
    (19) E4 -> . T
    (20) E4 -> . NOT T
    (21) T -> . PARENTESIS_IZQUIERDO E PARENTESIS_DERECHO
    (22) T -> . FUNCTION
    (23) T -> . ID_COMPLETO
    (24) T -> . VALOR_INT
    (25) T -> . VALOR_FLOAT
    (26) ID_COMPLETO -> . ID

    NOT             shift and go to state 75
    PARENTESIS_IZQUIERDO shift and go to state 76
    FUNCTION        shift and go to state 77
    VALOR_INT       shift and go to state 79
    VALOR_FLOAT     shift and go to state 80
    ID              shift and go to state 81

    E                              shift and go to state 165
    E2                             shift and go to state 71
    E3                             shift and go to state 72
    E4                             shift and go to state 73
    T                              shift and go to state 74
    ID_COMPLETO                    shift and go to state 78

state 159

    (47) DO_WHILE -> DO DOS_PUNTOS EST WHILE E PUNTO_COMA .

    END_LOOP        reduce using rule 47 (DO_WHILE -> DO DOS_PUNTOS EST WHILE E PUNTO_COMA .)


state 160

    (49) FOR_ -> FOR EST PUNTO_COMA E PUNTO_COMA EST . DOS_PUNTOS EST

    DOS_PUNTOS      shift and go to state 166


state 161

    (55) P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA .

    PROCEDURE       reduce using rule 55 (P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA .)
    INT             reduce using rule 55 (P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA .)
    FLOAT           reduce using rule 55 (P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA .)
    $end            reduce using rule 55 (P -> PROCEDURE ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN PUNTO_COMA END PROCEDURE PUNTO_COMA .)


state 162

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION . PUNTO_COMA

    PUNTO_COMA      shift and go to state 167


state 163

    (51) ELSIF_ -> END IF PUNTO_COMA .

    END_IF          reduce using rule 51 (ELSIF_ -> END IF PUNTO_COMA .)


state 164

    (52) ELSIF_ -> ELSE DOS_PUNTOS EST . END IF PUNTO_COMA

    END             shift and go to state 168


state 165

    (53) ELSIF_ -> ELSIF DOS_PUNTOS E . EST ELSIF_
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    ELSIF           reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    EST                            shift and go to state 169
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 166

    (49) FOR_ -> FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS . EST
    (37) EST -> . empty
    (38) EST -> . LOOP END_LOOP PUNTO_COMA EST
    (39) EST -> . IF_ END_IF PUNTO_COMA EST
    (40) EST -> . A PUNTO_COMA EST
    (41) EST -> . PROCEDURE PUNTO_COMA EST
    (42) EST -> . FUNCTION PUNTO_COMA EST
    (43) EST -> . ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA EST
    (1) empty -> .
    (44) LOOP -> . DO_WHILE
    (45) LOOP -> . WHILE_
    (46) LOOP -> . FOR_
    (50) IF_ -> . IF E DOS_PUNTOS EST ELSIF_
    (33) A -> . ID ASIGNACION VALOR_INT
    (34) A -> . ID ASIGNACION VALOR_FLOAT
    (35) A -> . ID ASIGNACION E
    (36) A -> . ID ASIGNACION ID_COMPLETO PARENTESIS_IZQUIERDO PARENTESIS_DERECHO
    (47) DO_WHILE -> . DO DOS_PUNTOS EST WHILE E PUNTO_COMA
    (48) WHILE_ -> . WHILE E DOS_PUNTOS EST
    (49) FOR_ -> . FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST

    PROCEDURE       shift and go to state 42
    FUNCTION        shift and go to state 48
    ID              shift and go to state 49
    END_LOOP        reduce using rule 1 (empty -> .)
    IF              shift and go to state 53
    DO              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    EST                            shift and go to state 170
    empty                          shift and go to state 44
    LOOP                           shift and go to state 45
    IF_                            shift and go to state 46
    A                              shift and go to state 47
    DO_WHILE                       shift and go to state 50
    WHILE_                         shift and go to state 51
    FOR_                           shift and go to state 52

state 167

    (56) F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA .

    PROCEDURE       reduce using rule 56 (F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA .)
    INT             reduce using rule 56 (F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA .)
    FLOAT           reduce using rule 56 (F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA .)
    $end            reduce using rule 56 (F -> TIPO ID PARENTESIS_IZQUIERDO PARENTESIS_DERECHO DOS_PUNTOS V_M BEGIN PUNTO_COMA EST RETURN ID PUNTO_COMA END FUNCTION PUNTO_COMA .)


state 168

    (52) ELSIF_ -> ELSE DOS_PUNTOS EST END . IF PUNTO_COMA

    IF              shift and go to state 171


state 169

    (53) ELSIF_ -> ELSIF DOS_PUNTOS E EST . ELSIF_
    (51) ELSIF_ -> . END IF PUNTO_COMA
    (52) ELSIF_ -> . ELSE DOS_PUNTOS EST END IF PUNTO_COMA
    (53) ELSIF_ -> . ELSIF DOS_PUNTOS E EST ELSIF_

    END             shift and go to state 148
    ELSE            shift and go to state 149
    ELSIF           shift and go to state 150

    ELSIF_                         shift and go to state 172

state 170

    (49) FOR_ -> FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST .

    END_LOOP        reduce using rule 49 (FOR_ -> FOR EST PUNTO_COMA E PUNTO_COMA EST DOS_PUNTOS EST .)


state 171

    (52) ELSIF_ -> ELSE DOS_PUNTOS EST END IF . PUNTO_COMA

    PUNTO_COMA      shift and go to state 173


state 172

    (53) ELSIF_ -> ELSIF DOS_PUNTOS E EST ELSIF_ .

    END_IF          reduce using rule 53 (ELSIF_ -> ELSIF DOS_PUNTOS E EST ELSIF_ .)


state 173

    (52) ELSIF_ -> ELSE DOS_PUNTOS EST END IF PUNTO_COMA .

    END_IF          reduce using rule 52 (ELSIF_ -> ELSE DOS_PUNTOS EST END IF PUNTO_COMA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for WHILE in state 62 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 67 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 68 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 82 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 95 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 96 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 128 resolved as shift
WARNING: reduce/reduce conflict in state 85 resolved using rule (T -> VALOR_INT)
WARNING: rejected rule (A -> ID ASIGNACION VALOR_INT) in state 85
WARNING: reduce/reduce conflict in state 86 resolved using rule (T -> VALOR_FLOAT)
WARNING: rejected rule (A -> ID ASIGNACION VALOR_FLOAT) in state 86
WARNING: Rule (A -> ID ASIGNACION VALOR_INT) is never reduced
WARNING: Rule (A -> ID ASIGNACION VALOR_FLOAT) is never reduced
